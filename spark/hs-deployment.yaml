{{- define "logDirectoryTag" }}
  {{- if eq .Values.sparkEventLogStorage.cloudProvider "amazon"}}
    {{- printf "s3a://%s" .Values.sparkEventLogStorage.logDirectory }}
  {{- else if eq .Values.sparkEventLogStorage.cloudProvider "alibaba"}}
    {{- printf "oss://%s" .Values.sparkEventLogStorage.logDirectory }}
  {{- else if eq .Values.sparkEventLogStorage.cloudProvider "azure"}}
    {{- printf "wasb://%s@%s.blob.core.windows.net" .Values.sparkEventLogStorage.logDirectory .Values.sparkEventLogStorage.azureStorageAccountName }}
  {{- else if eq .Values.sparkEventLogStorage.cloudProvider "google"}}
    {{- printf "gs://%s" .Values.sparkEventLogStorage.logDirectory }}
  {{- else if eq .Values.sparkEventLogStorage.cloudProvider "oracle"}}
    {{- printf "oci://%s@%s" .Values.sparkEventLogStorage.logDirectory .Values.sparkEventLogStorage.oracleNamespace }}
  {{- else }}
    {{- .Values.sparkEventLogStorage.logDirectory }}
  {{- end }}
{{- end }}
{{- $schema := .Values.sparkEventLogStorage.cloudProvider }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "spark-hs.fullname" . }}
  labels:
    app: {{ template "spark-hs.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  selector:
    matchLabels:
      app: {{ template "spark-hs.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "spark-hs.fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["bash", "-c", "cp /app/hdfs/spark/prepared_conf/bootstrap.sh /tmp/ && chmod +x /tmp/bootstrap.sh && /tmp/bootstrap.sh"]
        env:
          - name: HADOOP_USER_NAME
            value: hdfs
          - name: SPARK_NO_DAEMONIZE
            value: "false"
          #- name: SPARK_HISTORY_OPTS
          #  value: {{ printf "-Dspark.history.fs.logDirectory=%s" (include "logDirectoryTag" . )}}
          - name: SPARK_HISTORY_OPTS
            value: -Dspark.history.fs.logDirectory=file:///tmp/sparklogs
        volumeMounts:
          - name: config-init-volume
            mountPath: /app/hdfs/spark/prepared_conf
        {{- if eq $schema "google" }}
          - name: secret-volume
            mountPath: /app/hdfs/spark/conf/secret/google.json
            subPath: google.json
        {{- else if eq $schema "oracle" }}
          - name: secret-volume
            mountPath: /app/hdfs/spark/conf/secret/api_key
            subPath: api_key
        {{- end }}
          - name: juicefs-pvc
            mountPath: "/tmp/sparklogs"
        ports:
          - name: http
            containerPort: {{ .Values.service.internalPort }}
            protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        resources:
{{ toYaml .Values.resources | indent 12 }}
      volumes:
        - name: config-init-volume
          configMap:
            name: {{ template "spark-hs.fullname" . }}-spark-hs-config
      {{- if or (eq $schema "google") ((eq $schema "oracle")) }}
        - name: secret-volume
          secret:
            secretName: {{ default (printf "%s" (include "spark-hs.fullname" .)) .Values.sparkEventLogStorage.secretName }}
      {{- end }}
        - name: juicefs-pvc
          persistentVolumeClaim:
            claimName: rss-juicefs-pvc
